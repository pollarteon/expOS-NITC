//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//PROCESS MANAGER MODULE
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

alias functionNum R1; 
alias currentPID R2; 

if(functionNum==1) then //get free pcb
	alias index R3;
	alias i R4;
	i=0;
	index=-1;
	while(i<=15) do
		if([PROCESS_TABLE + (i * 16) + 4]==TERMINATED) then
			index=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if(index==-1) then
		R0=-1;
		return;
	endif;

	[PROCESS_TABLE + (index * 16) + 1]=index;
	[PROCESS_TABLE + (index * 16) + 14]=PAGE_TABLE_BASE+index*20;
	[PROCESS_TABLE + (index * 16) + 15]=10;
	R0=index;
	return;

endif;

if(functionNum==2) then //Free user area page
	alias userAreaPageNo R3;
	userAreaPageNo=[PROCESS_TABLE + currentPID*16 + 11];

	alias j R4;
	j = 496;
	while(j<=511) do 
	
		if([userAreaPageNo+j]==1)then //semaphore

			backup;
			R1=7; //release semaphore
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=j;
			call MOD_0;
			restore;

		endif;

		if([userAreaPageNo+j]==0)then //file
			backup;
			R1 = 4; //close function in FILE MANAGER MODULE
			R2 = [userAreaPageNo+j+1];
			call MOD_3;
			restore;
		endif;

		j=j+2;
	endwhile;
	
	

	backup;
	R1=2;
	R2=userAreaPageNo;
	call MOD_2;
	restore;
	
	return;

endif;

if(functionNum==3) then //Exit process function

	if([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] != 9) then
		alias i R3;
		i=0;
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4]==WAIT_PROCESS && [PROCESS_TABLE+i*16+5]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			if([PROCESS_TABLE+16*i+2]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+2]=-1;
			endif;
			i=i+1;
		endwhile;
	endif;

	//Free page table Entries
	
	backup;
	R1=4;
	R2=currentPID;
	call MOD_1;
	restore;
	

	//Free User area page
	
	backup;
	R1=2;
	R2=currentPID;
	call MOD_1;
	restore;
	

	[PROCESS_TABLE+16*currentPID+4]=TERMINATED;
	return;

endif;

if(functionNum==4) then //Free page table function
	
	PTBR=PAGE_TABLE_BASE+currentPID*20;

	//Invalidating Library Pages
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";

	backup;
		alias p R7;
		p=4;
		while(p<20) do
			if([PTBR+p]!=-1) then

				backup;
				R1=2;
				R2=[PTBR+p];
				call MOD_2;
				restore;

				[PTBR+p]=-1;
				[PTBR+p+1]="0000";
			endif;
			p=p+2;
		endwhile;
	restore;

	//removing blocks using disk map table

	alias disk_map R8;
	disk_map = DISK_MAP_TABLE + 10*currentPID; //disk map table base

	alias i R9;
	i=0;

	while(i<=9) do
		if( ([disk_map+i]!=-1) && (i==2 || i==3 || i==8 || i==9) ) then
			backup;

			//Invoking release block function
			R1=4; //release block
			R2= [disk_map+i]; //block number to be released
			call MOD_2;
			restore;
		endif;
		[disk_map+i]=-1; 
		i=i+1;
	endwhile;

	return;
endif;