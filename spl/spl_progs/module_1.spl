//PROCESS MANAGER MODULE

alias functionNum R1; //retriving the function number
alias currentPID R2; //PID of current process


if(functionNum==1)then //get free pcb
	alias index R3;
	alias i R4;
	index=-1;
	i=0;
	while(i<=15)do
		if([PROCESS_TABLE+i*16+4]==TERMINATED)then
			index=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if(index==-1)then
		R0=-1;
		return;
	endif;
	[PROCESS_TABLE+index*16+1]=index;
	[PROCESS_TABLE+index*16+14]=PAGE_TABLE_BASE+index*20;
	[PROCESS_TABLE+index*16+15]=10; //PTLR
	R0=index;
	return;
endif;

if(functionNum==2) then //Free user area page
	alias userAreaPageNo R3;
	userAreaPageNo=[PROCESS_TABLE + currentPID*16 + 11];

	backup;
	R1=2;
	R2=userAreaPageNo;
	call MOD_2;
	restore;
	return;

endif;

if(functionNum==3) then //Exit process

	//Free page table Entries
	backup;
	R1=4;
	R2=currentPID;
	call MOD_1;
	restore;

	//Free User area page
	backup;
	R1=2;
	R2=currentPID;
	call MOD_1;
	restore;

	[PROCESS_TABLE+16*currentPID+4]=TERMINATED;
	return;

endif;

if(functionNum==4) then //Free page table function
	
	PTBR=PAGE_TABLE_BASE+currentPID*20;

	//Invalidating Library Pages
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";

	backup;
		alias p R7;
		p=4;
		while(p<20) do
			if([PTBR+p]!=-1) then

				backup;
				R1=2;
				R2=[PTBR+p];
				call MOD_2;
				restore;

				[PTBR+p]=-1;
				[PTBR+p+1]="0000";
			endif;
			p=p+2;
		endwhile;

	restore;

	//going through heap and stack entries
	if([DISK_MAP_TABLE+10*currentPID+2]!=-1)then
		backup;
			R1=4; //Release page function
			R2=[DISK_MAP_TABLE+10*currentPID+2];
			call MOD_2;
		restore;
	endif;
	if([DISK_MAP_TABLE+10*currentPID+3]!=-1)then
		backup;
			R1=4; //Release page function
			R2=[DISK_MAP_TABLE+10*currentPID+3];
			call MOD_2;
		restore;
	endif;
	if([DISK_MAP_TABLE+10*currentPID+8]!=-1)then
		backup;
			R1=4; //Release page function
			R2=[DISK_MAP_TABLE+10*currentPID+8];
			call MOD_2;
		restore;
	endif;
	if([DISK_MAP_TABLE+10*currentPID+9]!=-1)then
		backup;
			R1=4; //Release page function
			R2=[DISK_MAP_TABLE+10*currentPID+9];
			call MOD_2;
		restore;
	endif;


	//invalidating the disk map for the process
	alias i R3;
	i=0;
	while(i<=9)do
		[DISK_MAP_TABLE+10*currentPID+i]=-1;
		i=i+1;
	endwhile;

	return;
endif;