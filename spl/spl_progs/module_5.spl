//SCHEDULER


alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush (BP);

//saving process context in process table

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


//switching process

alias tempPID R10;
tempPID=currentPID+1;

alias newPID R2;
newPID=0;

tempPID=1;

while(tempPID<currentPID) do
	if([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED) then
		newPID=tempPID;
		break;
	endif;
	tempPID=tempPID+1;
endwhile;


tempPID=currentPID+1;
while(tempPID<=15) do
	if([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED) then
		newPID=tempPID;
		break;
	endif;
	tempPID=tempPID+1;
endwhile;


//restoring process context

alias NewProcessTable R3;
NewProcessTable = PROCESS_TABLE + newPID * 16;

alias new_userarea_page_no R4;
new_userarea_page_no = [NewProcessTable + 11];

SP =  new_userarea_page_no * 512 + [NewProcessTable + 12] ;
PTBR = [NewProcessTable + 14];
PTLR = [NewProcessTable + 15];

//changing to new process
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([NewProcessTable + 4] == CREATED) then

	SP = [NewProcessTable + 13];
	[NewProcessTable + 4] = RUNNING;
	[NewProcessTable + 9] = 0;
	ireturn;

endif;

[NewProcessTable + 4] = RUNNING;

multipop (BP);

return;