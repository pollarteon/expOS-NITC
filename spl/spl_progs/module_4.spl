//DEVICE MANAGER MODULE

alias functionNum R1;
alias currentPID R2;

if(functionNum==1) then //Disk Store function

	alias page_no R3;
	alias block_no R4;

	backup;
		R1=3;
		R2=currentPID;
		call MOD_0;
	restore;

	[DISK_STATUS_TABLE+1]=1; //load/store
	[DISK_STATUS_TABLE+2]=page_no;
	[DISK_STATUS_TABLE+3]=block_no;

	store(page_no,block_no);

	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;

	backup;
	call MOD_5;//invoking Scheduler
	restore;

	return;

endif;


if(functionNum==2) then //Disk load function

	alias page_no R3;
	alias block_no R4;

	//Acquiring disk
	backup;
	R1=3;
	R2=currentPID;
	call MOD_0;
	restore;


	[DISK_STATUS_TABLE+1]=0; //load / store bit
	[DISK_STATUS_TABLE+2]=page_no; 
	[DISK_STATUS_TABLE+3]=block_no; 

	load(page_no,block_no);

	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;	

	backup;
	call MOD_5; //Invoking Scheduler
	restore;

	return;

endif;

if(functionNum==3) then //Terminal write function
	
	backup;
	R1=8;
	R2=currentPID;
	call MOD_0;
	restore;
	//Terminal Acquired

	alias word R3;
	print word;

	//Releasing terminal

	backup;
	R1=9;
	R2=currentPID;
	call MOD_0;
	restore;

	return;

else
	//Terminal read function
	if(functionNum==4) then
	
		//multipush(R0, R1, R2, R3, R4, R5, R6);
		backup;
		R1=8;
		R2=currentPID;
		call MOD_0;
		restore;
		//multipop(R0, R1, R2, R3, R4, R5, R6);
		//Terminal Acquired

		read;
		[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;

		
		backup;
		call MOD_5; //Invoking Scheduler
		restore;

		alias physicalPageNum R4;
		alias offset R5;
		alias PhysicalAddr R6;
		physicalPageNum = [PTBR + 2 * ((R3)/ 512)];
		offset = (R3) % 512;
		PhysicalAddr = (physicalPageNum * 512) + offset;
		[PhysicalAddr] = [PROCESS_TABLE + (currentPID*16) + 8];

		return;
	else
		return;

	endif;

endif;
return;
